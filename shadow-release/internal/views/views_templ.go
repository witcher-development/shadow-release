// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.663
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"errors"
	"fmt"
	"shadow_release/internal/db"
)

func getVersionName(id int64, versions []db.Version) (string, error) {
	for _, item := range versions {
		if item.ID == id {
			return item.Name, nil
		}
	}

	return "", errors.New("No Version found by id")
}
func filterByVersion(version int64, records []db.Record) []db.Record {
	var filtered []db.Record
	for _, item := range records {
		if item.Version == version {
			filtered = append(filtered, item)
		}
	}

	return filtered
}
func getMatchingRecord(currentId int64, key string, records []db.Record) (db.Record, error) {
	for _, item := range records {
		if item.Synckey == key && item.ID != currentId {
			return item, nil
		}
	}

	return db.Record{}, errors.New("No Version found by id")
}

type VersionsUI struct {
	db.Version
	Records []RecordUI
}

type RecordUI struct {
	db.Record
	NotFound bool
	Extra    bool
}

func ProcessRecords(records []db.Record, versions []db.Version) []VersionsUI {
	if len(records) == 0 || len(versions) == 0 {
		return []VersionsUI{}
	}

	result := []VersionsUI{}
	original := versions[0].ID

	// filling result with versions + empty records array
	for _, version := range versions {
		result = append(result, VersionsUI{Version: version})
	}

	// filling records for the original version
	for _, record := range records {
		if record.Version == original {
			result[0].Records = append(result[0].Records, RecordUI{Record: record})
			fmt.Println(&record.ID)
		}
	}

	// finding matching records for original records
	for _, originalRecord := range result[0].Records {
		for recordIndex, record := range records {
			fmt.Println(originalRecord.ID, record.ID)
			if originalRecord.ID != record.ID && originalRecord.Synckey == record.Synckey {
				fmt.Println("match sync key")
				for versionIndex, resultVersion := range result {
					if resultVersion.ID == record.Version {
						fmt.Println("found version to add")
						result[versionIndex].Records = append(result[versionIndex].Records, RecordUI{Record: record})
						break
					}
				}
				break
			}
			if recordIndex == len(records)-1 {
				for versionIndex, _ := range result {
					if result[versionIndex].ID == original {
						continue
					}
					result[versionIndex].Records = append(result[versionIndex].Records, RecordUI{NotFound: true})
				}
			}
		}
	}

	for _, item := range result {
		fmt.Println(item)
	}

	return result
}

func RecordsTable(versions []VersionsUI) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div><div class=\"versions\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(versions) == 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>no data</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		for _, version := range versions {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"version\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(version.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/views.templ`, Line: 113, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, record := range version.Records {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"record\"><div class=\"version\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if record.NotFound {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"empty\">no matching record found</div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var3 string
					templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(record.Path)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/views.templ`, Line: 122, Col: 25}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Page(records []db.Record, versions []db.Version) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><link rel=\"stylesheet\" href=\"assets/styles.css\"></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = RecordsTable(ProcessRecords(records, versions)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
